---
- name: Stuff we are always going to do
  tags:
    - always
  block:

    # fail with good error for Automation controller user
    - name: Determine that both AAP and Machine credentials are set
      ansible.builtin.assert:
        that:
          - "lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') !=''"
          - "lookup('ansible.builtin.env', 'CONTROLLER_HOST') !=''"
          - "lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') !=''"
        fail_msg:
          - "Red Hat Ansible Automation Platform credential is not set"
          - "Please assign correct credentials to the Job Template"

    - name: Get Demo instances we care about
      register: instance_info
      amazon.aws.ec2_instance_info:
        region: "{{ inventory_region }}"
        filters:
          tag:Name: "{{ inventory_vm_name }}"
          instance-state-name: [running]

    - name: Get Demo web instances we care about
      register: web_instance_info
      amazon.aws.ec2_instance_info:
        region: "{{ inventory_region }}"
        filters:
          tag:group: "ml_demo"
          instance-state-name: [running]

    - name: Create a new token using username/password
      ansible.controller.token:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_username: "{{ lookup('ansible.builtin.env', 'CONTROLLER_USERNAME') }}"
        controller_password: "{{ lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD') }}"
        validate_certs: false
        description: Daily Demo token
        scope: write
        state: present

- name: Adding our new vm to our inventory
  tags:
    - create
  block:

    - name: Update the AAP Managed Inventory
      loop: "{{ instance_info['instances'] }}"
      ansible.controller.host:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        validate_certs: false
        name: "{{ item['public_dns_name'] }}"
        inventory: "{{ inventory_managed_inventory_name }}"
        state: present
        enabled: true
        variables:
          F5_mgmt_ip: "{{ item['public_ip_address'] }}"
          private_ip_address: "{{ item['private_ip_address'] }}"

    - name: Create a group
      loop: "{{ instance_info['instances'] }}"
      ansible.controller.group:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        validate_certs: false
        name: f5demo
        description: Automation Controller Group
        inventory: "{{ inventory_managed_inventory_name }}"
        hosts: "{{ item['public_dns_name'] }}"
        preserve_existing_hosts: true
        variables:
          server_port: '8443'

    - name: Update runtime inventory
      loop: "{{ instance_info['instances'] }}"
      ansible.builtin.add_host:
        name: "{{ item['public_dns_name'] }}"
        groups:
          - f5demo

    - name: Update the AAP Managed Inventory with webservers
      loop: "{{ web_instance_info['instances'] }}"
      ansible.controller.host:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        validate_certs: false
        name: "{{ item['private_dns_name'] }}"
        inventory: "{{ inventory_managed_inventory_name }}"
        state: present
        enabled: true
        variables:
          ansible_host: "{{ item['private_ip_address'] }}"

    - name: Create the ml_demo group of webservers
      loop: "{{ web_instance_info['instances'] }}"
      ansible.controller.group:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        validate_certs: false
        name: tag_Type_ml_demo
        description: Group of web servers for the F5 daily demo
        inventory: "{{ inventory_managed_inventory_name }}"
        hosts: "{{ item['private_dns_name'] }}"
        preserve_existing_hosts: true

    - name: Update runtime inventory with the webservers
      loop: "{{ web_instance_info['instances'] }}"
      ansible.builtin.add_host:
        name: "{{ item['private_dns_name'] }}"
        groups:
          - tag_Type_ml_demo


    - name: Remove my daily demo token
      ansible.controller.token:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        existing_token: "{{ controller_token }}"
        validate_certs: false
        state: absent

- name: Removing our vm from our inventory
  tags:
    - remove
  block:

    - name: Remove vm from the inventory
      loop: "{{ instance_info['instances'] }}"
      ansible.controller.host:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        validate_certs: false
        name: "{{ item['public_dns_name'] }}"
        inventory: "{{ inventory_managed_inventory_name }}"
        state: absent

    - name: Remove webservers from the inventory
      loop: "{{ web_instance_info['instances'] }}"
      ansible.controller.host:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        validate_certs: false
        name: "{{ item['public_dns_name'] }}"
        inventory: "{{ inventory_managed_inventory_name }}"
        state: absent

    - name: Remove inventory host groups
      loop:
        - f5demo
        - tag_Type_ml_demo
      ansible.controller.group:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        validate_certs: false
        name: "{{ item }}"
        inventory: "{{ inventory_managed_inventory_name }}"
        state: absent

    - name: Remove my daily demo token
      ansible.controller.token:
        controller_host: "{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}"
        controller_oauthtoken: "{{ controller_token }}"
        existing_token: "{{ controller_token }}"
        validate_certs: false
        state: absent
